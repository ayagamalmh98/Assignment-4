

public class sigleList implements ILinkedList {
	Node head;
    static class Node { 
  
        Object data;
        int exp;
        int coef;
        Node next; 
  
        // Constructor 
        Node(Object d) 
        { 
            data = d; 
            next = null; 
        }
        Node(int e ,int c) 
        { 
            this.exp = e; this.coef=c;
            next = null; 
        }
    }


public void add(int index, Object element){
	Node n=new Node(element);
	if (head==null)
		head=n;
	else {
	
	Node current=head;
	for (int i=0 ; i<= index-2;i++)
		current=current.next;
	n.next=current.next;
	current.next=n;
	

}
}
public void addP(int c,int e) {
	Node n=new Node(c,e);
	if (head==null)
		head=n;
	else {
	Node current;
	current = head;
	while (current.next!=null) 
		current=current.next;
	current.next = n;
	n.next = null;	
}
}
public void add(Object element) {
	Node n=new Node(element);
	if (head==null)
		head=n;
	else {
	Node current;
	current = head;
	while (current.next!=null) 
		current=current.next;
	current.next = n;
	n.next = null;	
}
}
public Object get(int index) {
	Node current=head;
	for (int i=0;i<index;i++) {
		current=current.next;
	}
	return current.data;		
}
public void set(int index, Object element) {
	Node current=head; 
	for (int i=0;i<index;i++) {
		current=current.next;
		
	}
	current.data=element;
}
public void clear() {
	  // not sure!
	head=null;
}
public boolean isEmpty() {
	return (head==null);
	
		
}
public void remove(int index) {
	Node current=head;
	if (index==0) { head=head.next; return;}
	if (index+1>size()) { System.out.println("Out Of Size");return; }
	
	for (int i=0;i<=index-2;i++)
		current=current.next;
	Node n=current.next;
	current.next=n.next;
	
}
public int size() {
	Node current=head; int size=0;
	while (current!=null) {
		size++; current=current.next;}
	return size;
	
		
}

public sigleList sublist(int fromIndex, int toIndex) {
	Node current=head;
	for (int i=0;i<=fromIndex-1;i++)
		current=current.next;
	sigleList l2=new sigleList();
	l2.head=current; 
	for (int i=fromIndex;i<=toIndex-1;i++)
		current=current.next;
current.next=null;
	
	
	l2.print();
	return l2;
	
} 
public boolean contains(Object o) {
	Node current=head;
	while (current!=null) {
		if (current.data==o) return true;
		current=current.next;
	}
	return false;
	
}
public void print () {
	Node current=head;
	while (current!=null) {
		System.out.println(current.data+",");
		current=current.next;
	}
}

}
