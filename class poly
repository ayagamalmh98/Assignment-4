
public class poly  {
	

	
	  sigleList x=new sigleList();
	  sigleList y=new sigleList();
	  sigleList z=new sigleList();
	   //set polynomial
	 public void setPolynomial(char poly, int[][] terms) {
		
		
		  if (poly=='A') { 
		  
		  for (int i=0;i<terms.length;i++) {
				x.addP(terms[i][1], terms[i][0]);
			  }
		 
		  }
		  if (poly=='B') {
		 
		  for (int i=0;i<terms.length;i++) {
				y.addP(terms[i][1], terms[i][0]);
			  }
		  }
		  if (poly=='C') { 
		  
		  for (int i=0;i<terms.length;i++) {
				z.addP(terms[i][1], terms[i][0]);
			  }
		  }
		  
		  
	  }
	  ////////////
	 
	 public String print(char poly) {
		 sigleList.Node current=null;
		  RuntimeException es = new RuntimeException();
		  if (poly=='A') { current=x.head; if (x.head==null ) throw es; }
		  if (poly=='B') { current=y.head; if (y.head==null ) throw es; }
		  if (poly=='C') { current=z.head; if (z.head==null ) throw es; }
		  
			  String s=new String();
			  while (current.coef!=0) {
					 if (current.coef!=1&&current.coef!=-1) {
					 String d=String.format(" %d%s%d", current.coef,"x^", current.exp); 
					 s=s+d;}
					 else { if (current.coef>0) {
					 String d =String.format("%s%d", "x^",current.exp); s=s+d; }
					 		else { String d =String.format("-%s%d", "x^",current.exp); s=s+d;  }
					 }
					 if (current.next.coef!=0&&current.next.coef>0) { 
					 String z=new String("+"); 
					 s=s+z;}
					 
					 current=current.next;
					 
			  } System.out.println(s);
			  return s;
	 } 
	 
	  
	  /////////////////
	 public void clearPolynomial(char poly) {
		 sigleList.Node current=null;
		  RuntimeException es = new RuntimeException();
		  
		  if (poly=='A') { current=x.head; if (x.head==null) throw es; }
		  if (poly=='B') { current=y.head; if (y.head==null) throw es;  }
		  if (poly=='C') { current=z.head;  if (z.head==null) throw es; }
		  while(current.coef!=0) {
			  current.coef=0; current.exp=0;
			  current=current.next;	  
		  }
		  if (poly=='A')  current=x.head;  
		  if (poly=='B')  current=y.head;   
		  if (poly=='C')  current=z.head;  
		  while (current.coef!=0) {
			  System.out.println(current.coef+"  "+current.exp); current=current.next;
		  }
		  
	 	  
	  }
	 public  float evaluatePolynomial(char poly, float value) {
		 sigleList.Node current=null;
		  float sum=0; RuntimeException es = new RuntimeException();
		  if (poly=='A') {  current=x.head; if (x.head==null) throw es; }
		  if (poly=='B') {current =y.head; if (y.head==null) throw es; }
		  if (poly=='C') { current=y.head; if (z.head==null) throw es; }
			  
			  while(current.coef!=0) {
				  sum+=current.coef*Math.pow(value, current.exp);
				  current=current.next;
				  
			  }			   
		  System.out.println("sum=="+sum);
		  return sum;
	  }
	 public int[][] add(char poly1, char poly2){
		  int[][]res=new int[100][2];
		  sigleList.Node current1=null;
		  sigleList.Node current2=null;
		  int c,e; int aS=0; RuntimeException es = new RuntimeException();
		  if (poly1=='A'&&poly2=='B') {current1=x.head; current2=y.head; if (x.head==null||y.head==null) throw es; }
		  if (poly1=='A'&&poly2=='C') {current1=x.head; current2=z.head; if (x.head==null||z.head==null) throw es;  }
		  if (poly1=='B'&&poly2=='A') {current1=y.head; current2=x.head; if (y.head==null||x.head==null) throw es; ;}
		  if (poly1=='B'&&poly2=='C') {current1=y.head; current2=z.head; if (y.head==null||z.head==null) throw es; ;}
		  if (poly1=='C'&&poly2=='A') {current1=z.head; current2=x.head; if (z.head==null||x.head==null) throw es; ;}
		  if (poly1=='C'&&poly2=='B') {current1=z.head; current2=y.head; if (z.head==null||y.head==null) throw es; ;}
			  
			   
		        while(current1.coef!=0&&current2.coef!=0)
		        {
		            if(current1.exp==current2.exp)
		            {
		                c=current1.coef+current2.coef;
		                e=current1.exp;
		                current1=current1.next;
		                current2=current2.next;
		            }
		            else if(current1.exp>current2.exp)
		            {
		                c=current1.coef;
		                e=current1.exp;
		                current1=current1.next;
		            }
		            else
		            {
		                c=current2.coef;
		                e=current2.exp;
		                current2=current2.next;
		            }
		            res[aS][0]=c;    res[aS][1]=e; aS++;
			  
		  }
		        if (current1.coef==0) {
		        	while(current2.coef!=0) {
		        		res[aS][0]=current2.coef;    res[aS][1]=current2.exp; aS++;
		        		current2=current2.next;
		        	}
		        }
		        if (current2.coef==0) {
		        	while(current1.coef!=0) {
		        		res[aS][0]=current1.coef;    res[aS][1]=current1.exp; aS++;
		        		current1=current1.next;
		        	}
		        }
		        
		        for (int i=0;i<100;i++) {
					 for (int j=i+1;j<100;j++) {
						 //if (res[i][0]==0&&res[i][1]==0) break;
						 if (res[i][1]==res[j][1]) {
							 res[i][0]+=res[j][0];
							 res[j][0]=0; res[j][1]=0;
							 
						 }
						 
					 }
					  
				  }  int ss=0;
				  for (int i=0;i<100;i++) {
					  if (res[i][0]!=0) ss++;
					  
				  }
				  int[][] fin=new int[ss][2]; int j=0;
				  for (int i=0;i<100;i++) {
					  if (res[i][0]!=0) {
						  fin[j][0]=res[i][0]; fin[j][1]=res[i][1]; j++; }
				  } System.out.printf("Result set in R:");
				  for (int i=0;i<ss;i++) {
					  if (i!=ss-1) System.out.printf("("+fin[i][0]+","+fin[i][1]+"),");
					  else  System.out.printf("("+fin[i][0]+","+fin[i][1]+")");
				  }
				  System.out.println();
				  
		  return res;
		  }
	 public int[][] subtract(char poly1, char poly2){
		  int[][]res=new int[100][2];
		  sigleList.Node current1=null;
		  sigleList.Node current2=null;
		  int c,e; int aS=0; RuntimeException es = new RuntimeException();
		  if (poly1=='A'&&poly2=='B') {current1=x.head; current2=y.head; if (x.head==null||y.head==null) throw es; }
		  if (poly1=='A'&&poly2=='C') {current1=x.head; current2=z.head; if (x.head==null||z.head==null) throw es;  }
		  if (poly1=='B'&&poly2=='A') {current1=y.head; current2=x.head; if (y.head==null||x.head==null) throw es; ;}
		  if (poly1=='B'&&poly2=='C') {current1=y.head; current2=z.head; if (y.head==null||z.head==null) throw es; ;}
		  if (poly1=='C'&&poly2=='A') {current1=z.head; current2=x.head; if (z.head==null||x.head==null) throw es; ;}
		  if (poly1=='C'&&poly2=='B') {current1=z.head; current2=y.head; if (z.head==null||y.head==null) throw es; ;}	   
		        while(current1.coef!=0&&current2.coef!=0)
		        {
		            if(current1.exp==current2.exp)
		            {
		                c=current1.coef-current2.coef;
		                e=current1.exp;
		                current1=current1.next;
		                current2=current2.next;
		            }
		            else if(current1.exp>current2.exp)
		            {
		                c=current1.coef;
		                e=current1.exp;
		                current1=current1.next;
		            }
		            else
		            {
		                c=current2.coef;
		                e=current2.exp;
		                current2=current2.next;
		            }
		            res[aS][0]=c;    res[aS][1]=e; aS++;
			  
		  }
		        if (current1.coef==0) {
		        	while(current2.coef!=0) {
		        		res[aS][0]=current2.coef;    res[aS][1]=current2.exp; aS++;
		        		current2=current2.next;
		        	}
		        }
		        if (current2.coef==0) {
		        	while(current1.coef!=0) {
		        		res[aS][0]=current1.coef;    res[aS][1]=current1.exp; aS++;
		        		current1=current1.next;
		        	}
		        }
		        
		        for (int i=0;i<100;i++) {
					 for (int j=i+1;j<100;j++) {
						 //if (res[i][0]==0&&res[i][1]==0) break;
						 if (res[i][1]==res[j][1]) {
							 res[i][0]+=res[j][0];
							 res[j][0]=0; res[j][1]=0;
							 
						 }
						 
					 }
					  
				  }  int ss=0;
				  for (int i=0;i<100;i++) {
					  if (res[i][0]!=0) ss++;
					  
				  }
				  int[][] fin=new int[ss][2]; int j=0;
				  for (int i=0;i<100;i++) {
					  if (res[i][0]!=0) {
						  fin[j][0]=res[i][0]; fin[j][1]=res[i][1]; j++; }
				  }
				  System.out.printf("Result set in R:");
				  for (int i=0;i<ss;i++) {
					  if (i!=ss-1) System.out.printf("("+fin[i][0]+","+fin[i][1]+"),");
					  else  System.out.printf("("+fin[i][0]+","+fin[i][1]+")");
				  }
				  System.out.println();
		  return fin;
		  
	  }
	 ////////
	 public int[][] multiply(char poly1, char poly2){
		 int limit=0;
		  int count1=0;
		  int count2=0;
		  int temb;
		  int temp1;
		  int temp2;
		  int arr1[][]=new int[100000][2];
		  
		  sigleList.Node current1=null;
		  sigleList.Node current2=null;
			  RuntimeException es=new RuntimeException();
			  
			  if(poly1=='A' &&poly2=='B'){
				  current1=x.head;
				  current2=y.head; 
				  if(current1==null || current2==null) 
					  throw es;
				  }
			  
			  if(poly1=='B' &&poly2=='A'){
				  current1=y.head;
				  current2=x.head; 
				  if(current1==null || current2==null) 
					  throw es;
				  }
			  
			  if(poly1=='A' &&poly2=='C'){
				  current1=x.head;
				  current2=z.head; 
				  if(current1==null || current2==null) 
					  throw es;
				  }
			  if(poly1=='C' &&poly2=='A'){
				  current1=z.head;
				  current2=x.head; 
				  if(current1==null || current2==null) 
					  throw es;
				  }
			  if(poly1=='C' &&poly2=='B'){
				  current1=z.head;
				  current2=y.head; 
				  if(current1==null || current2==null) 
					  throw es;
				  }
			  
			  if(poly1=='B' &&poly2=='C'){
				  current1=y.head;
				  current2=z.head; 
				  if(current1==null || current2==null) 
					  throw es;
				  }
			  
			  while(current1.coef!=0) {
				  count1++;
				  current1=current1.next;
			  }
			  current1=x.head;
			  while(current2.coef!=0) {
				  count2++;
				  current2=current2.next;
			  }
			  current2=y.head;
			  for(int i=0;i<count1;i++) {
				  for(int j=0;j<count2;j++) {
					  arr1[limit][0]=(current1.coef)*(current2.coef);
					  arr1[limit][1]=(current1.exp)+(current2.exp);
					  limit++;
					  current2=current2.next;
				  }
				  current2=y.head;
				  current1=current1.next;
			  }
			  
			  //sum
			  for(int i=0;i<limit;i++) {
				  temb=arr1[i][1];
				  for(int j=i+1;j<limit;j++) {
					  if(temb==arr1[j][1]) {
						  arr1[i][0]+=arr1[j][0];
						  arr1[j][0]=0;
						  arr1[j][1]=0;
					  }
				  }
			  }
			  
			  //sorting
			  for(int i=0;i<limit-1;i++) {
					temb=arr1[i][1];
					temp2=i;
					for(int j=i;j<limit;j++) {
						if(arr1[j][1]>temb) {
							temb=arr1[j][1];
							temp2=j;
						}
					}
					temp1=arr1[i][1];
					arr1[i][1]=temb;
					arr1[temp2][1]=temp1;
					
					temp1=arr1[i][0];
					arr1[i][0]=arr1[temp2][0];
					arr1[temp2][0]=temp1;
					
				}
			  
		  int ss=0;
			  for (int i=0;i<100000;i++) {
				  if (arr1[i][0]!=0) ss++;
				  
			  }
			  int[][] fin=new int[ss][2]; int j=0;
			  for (int i=0;i<100000;i++) {
				  if (arr1[i][0]!=0) {
					  fin[j][0]=arr1[i][0]; fin[j][1]=arr1[i][1]; j++; }
			  }
			  System.out.printf("Result set in R:");
			  for (int i=0;i<ss;i++) {
				  if (i!=ss-1) System.out.printf("("+fin[i][0]+","+fin[i][1]+"),");
				  else  System.out.printf("("+fin[i][0]+","+fin[i][1]+")");
			  }
			  System.out.println();
		 
		  return fin ;
		  
		  
	  }
	  
	  

}


